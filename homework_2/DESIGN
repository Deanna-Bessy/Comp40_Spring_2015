Margaret Chapman & Deanna Bessy 
Design for HW2, iii

Part A:
Two-Dimensional, Polymorphic, Unboxed Arrays 

1. 
We are representing an unboxed 2D array of elements. 

2.
extern Uarray2_T Uarray2_new(int col, int row, int size) - Creates a new 2D 
array, dimensions col by row and each element having a size of size.  
extern void Uarray2_free(Uarray2_T *uarray2) - Frees memory of 2D array.
extern int Uarray2_height(Uarray2_T uarray2) - Returns number of rows in 2D 
array
extern int Uarray2_width(Uarray2_T uarray2) - Returns number of cols in 2D array
extern int Uarray2_size(Uarray2_T uarray2) - Returns the size of each element 
in the 2D array 
void *Uarray2_at(Uarray2_T, int col, int row) - Returns a void pointer to the 
element at the given row and col. If out of bounds, gives a checked runtime 
error. 
extern void UArray2_map_col_major(UArray2_T uarray2, void apply( int col, int 
row, UArray2_T uarray2, void *c1, void *c2 ), void *c2); - Walks through every 
element of the array, with row indeces changing more rapidly than col. Calls 
the apply function on each element. 
extern void UArray2_map_row_major(UArray2_T uarray2, void apply( int col, int 
row, UArray2_T uarray2, void *c1, void *c2 ), void *c2); - Walks through every 
element of the array, with col indeces changing more rapidly than row. Calls 
the apply function on each element.   

3. 
Uarray2_T 2darray = Uarray2_new(10, 5, sizeof(char)); // Creates a new 2D 
array that's 10 by 5
Uarray2_height(2darray); // Returns 5
Uarray2_width(2darray); // Returns 10
Uarray2_size(2darray); // Returns 4
Uarray2_at(2darray, 5, 3); // Returns a void pointer to the char position [5,3]
Uarray2_map_col_major(2darray, printelement, *c2); // Calls printelement 
of 2darray by col. 
Uarray2_free(*2darray); // Frees memory associated with 2darray

4. 
We will use a single Uarray, with the invariant being the index of an element 
at position [x,y] in the 2d array equals col*x + y. 

5.
For any element in the main Uarray, taking the floor of index/col will give 
you the row of that element in the abstract 2D array. Taking (index%col) of an 
element in the main Uarray will give  
you the col of that element in the abstract 2D array.

6. 
Start by using correct_usearry2 to test, and devise more cases that this 
doesn't cover as needed. 

7. 
Especially the idioms listed under using unboxed arrays: initializing array 
elements, storing values into an unboxed array. Other idioms will be used, 
although not as important as the 
unboxed array idioms. 

Part B:
Two-Dimensional Arrays of Bits

1. 
We are representing a 2D bitmap.

2.
extern Bit2_T Bit2_new(int col, int row) - Creates a 2D bitmap and sets all 
values to 0.
extern int Bit2_width(Bit2_T bit2) - Returns the number of cols in the bitmap.
extern int Bit2_height(Bit2_T bit2) - Returns the number of rows in the bitmap.
extern int Bit2_count(Bit2_T bit2) - Returns the number of 1s in the bitmap.
extern void Bit2_free(*Bit2_T bit2) - Frees memory associated with bitmap.
extern int Bit2_get(Bit2_T bit2, int col, int row) -  Returns the bit at 
specified col and row.
extern int Bit2_put(Bit2_T bit2, int col, int row, int bit) - Sets the bit at 
specified col and row to specified value (either 0 or 1). Returns previous 
value of specified bit.
extern void Bit2_map_col_major(Bit2_T bit2, void apply(int col, int row, 
Bit2_T bit2, int b, void *c1), void *c1); - Calls apply on each bit in the 
bitmap with row indeces changing more rapidly than col indeces.
extern void Bit2_map_row_major(Bit2_T bit2, void apply(int col, int row,
Bit2_T bit2, int b, void *c1), void *c1); - Calls apply on each bit in the 
bitmap with col indeces changing more rapidly than row indeces.

3. 
Bit2_T bitmap = Bit2_new(10, 5); // Creates a new 2D bitmap that's 10 by 5
Bit2_height(bitmap); // Returns 5
Bit2_width(bitmap); // Returns 10
Bit2_put(bitmap, 3, 4, 1); //Sets the bit at [3,4] to 1. Returns 0 which was 
the previous value of [3,4]
Bit2_count(bitmap); // Returns 1
Bit2_get(bitmap, 1, 2) //Returns 0
Bit2_map_col_major(bitmap, printelement, *c2); // Calls printelement on 
each element of bitmap by col. 
Bit2_free(*bitmap); // Frees memory associated with 2darray

4.
We will use a single Bit vector, with the invariant being the index of a bit at
position [x,y] in the 2d bitmap equals col*x+y.

5.
For any element in the main bit vector, taking the floor of the index/col will 
give the row of that element in the abstract 2D bitmap. Taking index % col of a
element in the main bit vector will give the col of that element in the abstract
2D bitmap.

6.
Start by using correct_usebit2 to test, and devise more cases that this 
doesn't cover as needed.

7.
None of the idioms are critical to the bitmap functions, but idioms may be 
used for minor programming details.

 
