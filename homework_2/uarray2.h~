/*
 * Margaret Chapman and Deanna Bessy
 * February 3, 2015
 * uarray2.h
 *
 * The general purpose of uarray2 is to create and manipulate an abstraction for
 * a 2D unboxed array. A Uarray2_T is a Uarray_T used to represent the 2D array.
 *
 */
#ifndef UARRAY2_INCLUDED
#define UARRAY2_INDLUDED

/*
 * Creates a new 2D array, dimensions col by row and each element having a size 
 * of size.
 */
extern Uarray2_T Uarray2_new(int col, int row, int size);

/* Frees memory of 2D array. */
extern void Uarray2_free(Uarray2_T *uarray2);

/* Returns number of rows in 2D array */ 
extern int Uarray2_rows(Uarray2_T uarray2);

/* Returns number of cols in 2D array */
extern int Uarray2_cols(Uarray2_T uarray2);
 
/* Returns the size of each element in the 2D array */ 
extern int Uarray2_size(Uarray2_T uarray2);

/*
* Returns a void pointer to the element at the given row and col. If out of
* bounds, gives a checked runtime error.  
*/
void *Uarray2_at(Uarray2_T, int col, int row);

/* 
 * Walks through every element of the array, with row indeces changing more 
 * rapidly than col. Calls the apply function on each element. 
*/ 
extern void Uarray2_map_col_major(Uarray2_T uarray2, void apply(int col, 
                                  int row, Uarray2_T uarray2, void *c1, 
                                  void *c2 ), void *c1, void *c2);
/* 
 * Walks through every element of the array, with col indeces changing more 
 * rapidly than row. Calls the apply function on each element. 
 */ 
extern void Uarray2_map_row_major(Uarray2_T uarray2, void apply(int col, 
                                  int row, Uarray2_T uarray2, void *c1, 
                                  void *c2 ), void *c1, void *c2);

#endif
