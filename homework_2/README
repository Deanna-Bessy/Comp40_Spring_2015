!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! This is a hw from the class comp40 at Tufts! If you're in comp40 right now,!!
!! stop right there. You should not be viewing this code. Course policy and   !! 
!! academic integrity makes that a big no-no. Bugs have intentionally not been!! 
!! fixed to discourage plagarism                                              !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 

This file describes debugging techniques, per requirement of the course. See 
TECHNIQUE doc for general overview of the assignment and DESIGN doc for more 
in depth design. 

TECHNIQUE
Margaret Chapman & Deanna Bessy
February 3, 2015

Debugging 
So far this semester, both of us have honed our debugging skills. This skill 
has been particularly helpful to us for memory leaks and manipulating pointers. 
While compile errors can help point you in the general direction of a bug, 
good debugging skills can help you find the exact problem. The first place 
to start debugging is printing to standard error the values of variable at 
various places in the program. Using standard error is preferred to standard 
output to ensure that they are printed in sequential order. This is especially
helpful for loops and can expose places where variables don't reflect the value
you're expecting them to. Interactive debuggers, like gdb, can be helpful 
tools to examine different states that your program takes on. Valgrind and 
printing out pointer addresses when memory is being allocated or freed can help
spot and fix memory leaks. The flag --leak-check=full, used with valgrind, is 
helpful to find the exact location of a memory leak. Having properties that 
should be upheld by the program (called invariants) can help you to determine 
what you should test for before submitting. The properties may be broken, for
example, during some loops, but should be restored by the end of the program. 
Theoretically, they should be restored as soon as possible. For this project
we used most of these techniques, but future projects might warrant more use 
of debugging tools like interactive debuggers. 