/* 
 * Graham Goudeau & Deanna Bessy  
 * Homework #6, UM
 * on_disk.c
 * 1/4/15
 */

#include <stdlib.h>
#include <stdio.h>
#include <bitpack.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include "on_disk.h"
#include "segment_memory.h"

const size_t BYTES_PER_WORD = sizeof(word) / sizeof(char); 

/*************************************************************************
 * Name: fill_segment_zero                                               *
 * Purpose: Fills segment 0 with                                         *
 * Arguments: Segmented memory struct, const  char pointer to input file,* 
 *            length in bytes of input file.                             *
 * Returns: Nothing                                                      *
 *************************************************************************/
void static inline fill_segment_zero(memory_data memory, const char *fp, size_t len) 
{
	FILE *file = fopen(fp, "r"); 
	segment_id id_zero = 0; 

        size_t offset = 0;
	char temp = fgetc(file);
	size_t byte_count = 0;
	word temp_word = 0;
	int byte_location = 3;
	size_t char_size = 8 * sizeof(char);

	/* Writes four bytes from the file into a word, then puts the word 
         * in the next empty spot in segment 0. Continues until the entire file
         * has been read, packed into words, and put in segment 0. 
         */
	while (byte_count < (len * 4)) {
		size_t lsb = char_size * byte_location;
		temp_word = Bitpack_news(temp_word, char_size,
					 lsb, temp);
		if (byte_count % BYTES_PER_WORD == 3) {
			write_word(id_zero, offset, temp_word, memory);
                        offset++;
                }

		byte_count++;
		if (byte_location == 0) byte_location = 3;
		else byte_location--;
		temp = getc(file);
        }
}

memory_data boot_up_memory(const char *fp)
{
        struct stat file_info;
        memory_data memory = initialize_memory();

        if (stat(fp, &file_info) == -1) {
                fprintf(stderr, "Problem with file\n");
                exit(1);
        }

        off_t size = file_info.st_size / sizeof(word);
	/* 
         * This is the very first segment being mapped when the um starts
         * meaning it will always have an id of 0.
         */
        map_segment(size, memory);

        fill_segment_zero(memory, fp, size);
  
        return memory;
}

