Graham Goudeau & Deanna Bessy
Hw 6, Universal Machine
4/6/15

-Collaboration: 
Discussing ideas and problem solving with other 40 students in Halligan at 
the same time, help from TAs. 
	
-What's Correctly Implemented: 
The entire universal machine. 

-Significant Departures From Design: 
Overall architecture is very similar to what's outlined in the design doc. 
Many of the modules contain functions that we did not originally anticipate 
having. These are mostly helper functions and functions that help modularize
code. 
The most imortant change is that the on disk format module does not 
handle getting the next word from the on-disk file, parsing it for the
instruction, and returning that instruction. It only boots the memory and 
fills segment 0 with the inputted program. The um module handles parsing & 
executing instructions and calling a function from the segmented memory 
module that gets an instruction.

-Architecture:

    Main module: 
	This module only checks that there is only one argument given, and 
        calls run on it. It knows no secrets, only that it can call the run 
        function from um.h on a given argument.

    Segmented memory module:
        This module manages the UM's segmented memory. It initializes & 
        frees memory, maps & unmaps segments, can get and write words into
	segments, and can load the program. The secrets it knows are the 
	program counter's state and the underlying Hanson data structures that
	represent segmented memory and unmapped id storage. For abstractions it
	uses a Hanson table and a stack. 

    On-disk format interface:
        This module has functions to fill segment 0 with the program and to 
	boot up memory. It knows secrets about how instructions are bitpacked
        into words and put into segment 0. For abstractions, it uses bitpack.

    UM interface:
        This module parses and executes instructions. It knows secrets about 
	how the registers are represented, the instruction counter, and the 
	format of instructions. Its run function contains the execution loop.

-How Long 50 Million Instructions Takes: 
We have a test program that executes 500 thousand instructions. It takes .075
seconds, meaning that 50 million instructions should take about 7.5 seconds.

-UM unit tests: 
	Halt test - Ensures that the program halts immediately on the halt 
        command, and prints "Bad!\n" if the program proceeds past the halt.

	Goto test - Tests to make sure that the Load Program command changes the
        program counter appropriately.  It loads location L into a register,
        and goes to that location in the code which prints "GOTO passed.\n"
        and halts.

	Conditional zero test - Tests to make sure that the UM reacts correctly
        to a register that has been loaded with zero.  The code says that if the
        register is nonzero, move to a location which fails.  If not, print
        the success message.

	Conditional nonzero test - Same as above, but flipped.  
        The register is loaded  with a nonzero value, and it branches 
        accordingly.

	Read/Put Char - Reads a single character from input, and outputs it 
        unchanged.

	Print Digit - The instructions load the value 5 into a register, add
        48 to it, and then print the result.  This prints the character '5', 
        because the  ASCII value of '0' is 48.

	NAND print digit - A value is received from input, then the last four 
        bits are extracted with a mask of 15 (all zeros with four ones at the 
        end). This is obtained using NAND(NAND(input, mask), NAND(input, mask)).
        Then this value is added to 48, and the result is printed.

	Run time test - A file with 500000 addition instructions and then a 
        halt.  It is used as a judge of our running time.  It completes in 
        0.075 seconds

	Map/Unmap test - Maps a segments and unmaps a segment, then prints out 
        the segment ID that was just mapped.  A properly working implementation
        should print out that segment 1 was just mapped and unmapped.

	Add test - Tests the functionality of the add command.

	Mult test - Tests the functionality of the multiply command.

	Division test - Tests the functionality of the division command.

	Cipher test - Takes a string as input, and prints out all the letters 
        shifted forwards by one.  A simple Caesar cipher.

-Hours Spent Analyzing: 2
-Hours Spent Preparing Design: 3
-Hours Spent Writing Code: 8 

