This is bomb 24 for lab comp40spring15.

It is owned by the following student(s):
deanna.bessy@tufts.edu
bruno.olmedo@tufts.edu

Deanna Bessy & Bruno Olmedo 
3/11/15
Bomb 24

-------------------------------------------------------------------------------

We spitballed ideas about what the different phases were doing with most other
students who were working in Halligan at the same time as us. There are 
honestly too many to name, but people were giving each other tips and hints
on how to do things as we went through the thrill of defusing this bomb. We 
also got great tips from TA's.

Estimated time spent: 25 hours

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////Phase Explanations//////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Phase_1:
Phase 1 checks to see if a string inputted is equal to the string "Wouldn't
you prefer a nice game of chess?" and explodes if it is not. 

Phase_2:
Phase 2 takes in 6 integer values and checks if the first and fourth, second 
and fifth, and third and sixth pairs are equivalent. If they are not, it 
explodes. It also explodes if they are all 0. 

Phase_3: 
Phase 3 takes a pair of numbers, and if the pair is not one of the following (in
order), it explodes: 

| 0 | 681 |
| 1 | 497 |
| 2 | 62  |
| 3 | 985 |
| 4 | 664 |
| 5 | 631 |
| 6 | 352 |
| 7 | 923 |

Phase_4:
Phase 4 calls a function that recursively calculates the factorial of an 
inputted value and checks to see if it is equal to 720 (meaning the inputted 
value must be 6).

Phase_5:
Phase 5 takes a user-inputted pair of integers. The first number determines
the first array index the program accesses in a pre-determined array of 16
values. The index of the next value jumped to is the value at the previous 
index accessed. The program jumps like this nine times, summing the values at
each index as it goes. If the final sum after the jumps are complete does not 
equal the second value inputted, the bomb explodes.  

Phase_6:
Phase 6 calls fun6 which sorts a linked list from largest to smallest using. 
It passes the head of the linked list to fun6, and fun6 returns the new head
after sorting. It then checks that the fifth node in the linked list contains
the same value as the one that was inputted. If it is not, the bomb explodes.



